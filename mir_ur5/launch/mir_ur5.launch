<?xml version="1.0"?>
<launch>
      <arg name="robot_name"/>
      <arg name="tf_prefix"/>
      <arg name="robot_namespace"/>
      <arg name="prefix" default="$(arg tf_prefix)"/> <!--diff drive needs this to be set-->
      <arg name="init_pose" default="-x 0.0 -y 0.0 -Y 0.0 -z 0.0"/>

      <arg name="local_planner" default="dwa" doc="Local planner can be either dwa, eband, base, teb or pose" />
      <!-- old: <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" /> -->
      <arg name="transmission_hw_interface1" default="hardware_interface/PositionJointInterface" />
      <arg name="transmission_hw_interface2" default="hardware_interface/VelocityJointInterface" />
      
      <!-- <arg name="transmission_hw_interface2" default="hardware_interface::ForceTorqueSensorInterface" /> -->

	<!-- By default, hide joint_state_publisher's GUI -->
      <arg name="use_gui" default="false" />

      <arg name="active_controllers" default="mobile_base_controller arm_cartesian_compliance_controller"/>
      <arg name="stopped_controllers" default="arm_velocity_traj_controller
                              arm_controller
				"/> <!-- shoulder_pan_joint_velocity_controller
                              shoulder_lift_joint_velocity_controller
                              elbow_joint_velocity_controller
                              wrist_1_joint_velocity_controller
                              wrist_2_joint_velocity_controller
                              wrist_3_joint_velocity_controller
                              joint_group_vel_controller -->

      <!-- old: <param name="robot_description" 
            command="$(find xacro)/xacro $(find mir_ur5_description)/urdf/mir_ur5.urdf.xacro transmission_hw_interface:=$(arg transmission_hw_interface)  tf_prefix:=$(arg tf_prefix)" /> -->      

       
      <param name="robot_description" 
            command="$(find xacro)/xacro $(find mir_ur5_description)/urdf/mir_ur5.urdf.xacro 
            transmission_hw_interface1:=$(arg transmission_hw_interface1)
            transmission_hw_interface2:=$(arg transmission_hw_interface2) tf_prefix:=$(arg tf_prefix)" />

      <param name="/robot_description" 
            command="$(find xacro)/xacro $(find mir_ur5_description)/urdf/mir_ur5.urdf.xacro 
            transmission_hw_interface1:=$(arg transmission_hw_interface1) 
            transmission_hw_interface2:=$(arg transmission_hw_interface2) tf_prefix:=$(arg tf_prefix)" />
      <!--
      <param name="robot_description" 
            command="$(find xacro)/xacro $(find mir_ur5_description)/urdf/mir_ur5.urdf.xacro robot_name:=$(arg robot_name) tf_prefix:=$(arg tf_prefix) robot_namespace:=$(arg robot_namespace) transmission_hw_interface1:=$(arg transmission_hw_interface1) transmission_hw_interface2:=$(arg transmission_hw_interface2)" />
      -->

	<!-- Load hardware configuration for cartesian compliance controller-->
      <!-- rosparam file="$(find mir_ur5_description)/config/compliance_hw_config.yaml" command="load"></rosparam> -->
      
      <!-- <param name="robot_description" 
            command="$(find xacro)/xacro inorder $(find mir_description)/urdf/mir.urdf.xacro"/> Add two dashes before inorder-->

      <!--Spawn the MiR plattform into Gazebo-->
      <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -param robot_description -model $(arg robot_name) $(arg init_pose)" 
          respawn="false" output="screen"/>          

      <!-- Load ros_control controller configurations from YAML file to parameter server-->
      <rosparam file="$(find mir_ur5_description)/config/joint_state_controller.yaml" command="load" />
      <rosparam file="$(find mir_ur5_description)/config/diffdrive_controller.yaml" command="load" subst_value="true"/>
      <rosparam file="$(find mir_ur5_moveit_config)/config/arm_controller.yaml" command="load" subst_value="true"/>
      <!-- <rosparam file="$(find mir_ur5_description)/config/velocity_controller.yaml" command="load" subst_value="true"/> -->
      <rosparam file="$(find mir_ur5_description)/config/cartesian_compliance_controller.yaml" command="load" subst_value="true"/>

      <!-- ************************************************************* -->


      <!-- Spawn joint_state_controller -->
      <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/$(arg robot_namespace)"
            args="joint_state_controller"/>

      <!-- spawn controller manager with all active controllers (args are all namespaces from inside controller_configurations files-->
      <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/$(arg robot_namespace)"
            args="$(arg active_controllers)">
      </node> 
     
      <!-- spawn other controller -->
      <node name="control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/$(arg robot_namespace)"
            args="--stopped $(arg stopped_controllers)"/>

       <!-- Joint state publisher -->
      <!-- NEW HERE: Add passive + mimic joints to joint_states topic -->
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <rosparam param="source_list" subst_value="true">[joint_states]</rosparam>
            <param name="rate" value="200.0" />
            <param name="use_gui" value="$(arg use_gui)"/>
      </node>

      <!-- Robot state publisher that publishes the current state of the robot to tf -->
      <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen"/>

      <!-- Note: This controller should be loaded and started -->
      <!-- <group ns="joint_to_cartesian_controller" >
              <node name="controller_spawner" pkg="controller_manager" type="spawner" args="joint_trajectory_controller" />
      </group> -->

      <!--Include Kalman-filter later again. For now only use odom-->
      <!-- <include file="$(find mir_ur5_gazebo)/launch/ekf.launch.xml"/> -->

      <!-- include force_torque_node publishing to compliance controller -->
      <!-- <include file="$(find my_tutorials)/launch/node_launcher.launch"/> -->


      <!-- OLD HERE: Add passive + mimic joints to joint_states topic 
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <rosparam param="source_list" subst_value="true">[joint_states]</rosparam>
            <param name="rate" value="200.0" />
            <param name="use_gui" value="$(arg use_gui)"/>
      </node> -->


      <!-- Localization with amcl particle swarm -->
      <include file="$(find mir_ur5_navigation)/launch/amcl.launch">
            <arg name="tf_prefix" value="$(arg tf_prefix)"/>
      </include>
      
      <!-- Navigation with the navigation stack -->
      <include file="$(find mir_ur5_navigation)/launch/move_base.xml">
            <arg name="local_planner" value="$(arg local_planner)"/>
            <arg name="tf_prefix" value="$(arg tf_prefix)"/>
      </include>

      <!-- Map both scan data topics on the "scan" topic and filter both scanner topics -->
      <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/> 
      <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

      <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
            <remap from="scan" to="b_scan" />
            <remap from="scan_filtered" to="b_scan_rep117" />
      </node>
        
      <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
            <remap from="scan" to="f_scan" />
            <remap from="scan_filtered" to="f_scan_rep117" />
      </node>

      <!-- Start all necessary moveit files -->
      <include file="$(find mir_ur5)/launch/start_moveit.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
            <arg name="tf_prefix" value="$(arg tf_prefix)"/>
      </include>

      <!-- Launch additional params to param server -->
      <rosparam command="load" file="$(find tutorials)/config/impedance_params.yaml" ns="/$(arg robot_namespace)" />
      
</launch>
